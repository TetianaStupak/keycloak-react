{"version":3,"file":"static/js/53.9fff254a.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/UpdateUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nconst LoginUpdateProfile = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.UpdateUserProfile; i18n: I18n } & KcProps) => {\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = i18n;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"loginProfileTitle\")}\n            formNode={\n                <form id=\"kc-update-profile-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields\n                        kcContext={kcContext}\n                        doInsertPasswordFields={true}\n                        onIsFormSubmittableValueChange={setIsFomSubmittable}\n                        i18n={i18n}\n                        {...props}\n                    />\n\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}></div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            {isAppInitiatedAction ? (\n                                <>\n                                    <input\n                                        className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        value={msgStr(\"doSubmit\")}\n                                    />\n                                    <button\n                                        className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        name=\"cancel-aia\"\n                                        value=\"true\"\n                                        formNoValidate\n                                    >\n                                        {msg(\"doCancel\")}\n                                    </button>\n                                </>\n                            ) : (\n                                <input\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonPrimaryClass,\n                                        props.kcButtonBlockClass,\n                                        props.kcButtonLargeClass\n                                    )}\n                                    type=\"submit\"\n                                    defaultValue={msgStr(\"doSubmit\")}\n                                    disabled={!isFomSubmittable}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default LoginUpdateProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../../tools/useCssAndCx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    //kcContext: KcContextBase.RegisterUserProfile;\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    doInsertPasswordFields: boolean;\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, doInsertPasswordFields, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { cx, css } = useCssAndCx();\n\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {(doInsertPasswordFields ? attributesWithPassword : kcContext.profile.attributes).map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={cx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={cx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={cx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 && (\n                                        <span\n                                            id={`input-error-${attribute.name}`}\n                                            className={cx(\n                                                props.kcInputErrorMessageClass,\n                                                css({\n                                                    \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                    \"& > span\": { \"display\": \"block\" }\n                                                })\n                                            )}\n                                            aria-live=\"polite\"\n                                        >\n                                            {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["LoginUpdateProfile","memo","_a","kcContext","i18n","props","__rest","cx","useCssAndCx","msg","msgStr","url","isAppInitiatedAction","useState","isFomSubmittable","setIsFomSubmittable","React","Template","Object","doFetchDefaultThemeResources","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","UserProfileFormFields","doInsertPasswordFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","type","value","kcButtonDefaultClass","name","formNoValidate","kcButtonBlockClass","defaultValue","disabled","BeforeField","AfterField","css","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","target","onBlurFactory","currentGroup","profile","attributes","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}